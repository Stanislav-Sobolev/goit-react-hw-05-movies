{"version":3,"file":"static/js/333.e0d4bf5c.chunk.js","mappings":"gOAEaA,EAAW,mCAAG,WAAMC,GAAN,8EACzBC,IAAAA,SAAAA,QAAyB,8BACX,mCAFW,SAICA,IAAAA,IAAA,iCAFZ,mCAEY,4DAE6DD,IAEpFE,OAAM,SAAAC,GAAK,OAAI,IAAIC,MAAMD,MARH,cAInBE,EAJmB,yBAUlBA,GAVkB,2CAAH,sD,SCmDxB,EAhDqB,WAAO,IAAD,EACzB,GAAsCC,EAAAA,EAAAA,YAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,IAAxD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BL,EAAAA,EAAAA,UAAS,IAAnC,eAAOM,EAAP,KAAcC,EAAd,KACMb,EAAM,UAAGU,EAAaI,IAAI,iBAApB,QAAiC,IAE7CC,EAAAA,EAAAA,YAAU,WACR,GAAKf,EAAL,CAIA,IAAMgB,EAAU,mCAAG,6GAEMjB,EAAYC,GAFlB,OAETiB,EAFS,OAIfT,EAAeS,EAAOC,KAAKC,SAJZ,gDAMfC,QAAQC,IAAI,aAAZ,MANe,yDAAH,qDAUhBL,OACC,CAAChB,IASJ,OACE,iCACE,kBAAMsB,OAAO,GAAGC,SATC,SAAAC,GACnBA,EAAEC,iBACF,IAAQC,EAAUF,EAAEG,OAAOC,SAAShB,MAA5Bc,MAEAf,EAARe,EAAwB,CAAE1B,OAAQ0B,GAA2B,KAK3D,WACE,kBACEG,KAAK,OACLC,KAAK,QACLJ,MAAOd,EACPmB,SAAU,SAAAP,GAAC,OAAIX,EAASW,EAAEG,OAAOD,WAEnC,mBAAQG,KAAK,SAAb,uBAGDtB,IAAe,SAACyB,EAAA,EAAD,CAAkBC,UAAW1B","sources":["services/fetchQuery.js","pages/SearchMovies.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const fetchMovies = async search => {\n  axios.defaults.baseURL = 'https://api.themoviedb.org/';\n  const myKey = 'a794a0e126a53200eb2bd9e3c7f541ab';\n\n  const fetchResult = await axios\n    .get(\n      `3/search/movie?api_key=${myKey}&language=en-US&page=1&include_adult=false&query=${search}`\n    )\n    .catch(error => new Error(error));\n\n  return fetchResult;\n};\n","import { RenderMoviesList } from 'components/RenderMoviesList';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMovies } from '../services/fetchQuery';\n\nconst SearchMovies = () => {\n  const [foundMovies, setFoundMovies] = useState();\n  const [searchParams, setSearchParams] = useSearchParams('');\n  const [query, setQuery] = useState('');\n  const search = searchParams.get('search') ?? '';\n\n  useEffect(() => {\n    if (!search) {\n      return;\n    }\n\n    const fetchQuery = async () => {\n      try {\n        const movies = await fetchMovies(search);\n\n        setFoundMovies(movies.data.results);\n      } catch (error) {\n        console.log('error :>> ', error);\n      }\n    };\n\n    fetchQuery();\n  }, [search]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const { value } = e.target.elements.query;\n\n    value ? setSearchParams({ search: value }) : setSearchParams({});\n  };\n\n  return (\n    <>\n      <form action=\"\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {foundMovies && <RenderMoviesList movieData={foundMovies} />}\n    </>\n  );\n};\n\nexport default SearchMovies;\n"],"names":["fetchMovies","search","axios","catch","error","Error","fetchResult","useState","foundMovies","setFoundMovies","useSearchParams","searchParams","setSearchParams","query","setQuery","get","useEffect","fetchQuery","movies","data","results","console","log","action","onSubmit","e","preventDefault","value","target","elements","type","name","onChange","RenderMoviesList","movieData"],"sourceRoot":""}